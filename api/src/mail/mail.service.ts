import * as nodemailer from 'nodemailer';
import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';

import { EMailService } from '../aws/ses/mail.service';
import { IMailData } from './interfaces/mail.interface';
import { IMailConfig } from "./interfaces/mail-config.interface";

@Injectable()
export class MailService {
  private readonly logger = new Logger('MailService');
  private readonly clientUrl: string;
  private readonly mailConfig: IMailConfig;

  constructor (
    private readonly configService: ConfigService,
    private readonly awsMailService: EMailService,
  ) {
    this.clientUrl = this.configService.get<string>('CLIENT_URL');
    this.mailConfig = {
      host: this.configService.get<string>('HOST'),
      port: this.configService.get<string>('PORT'),
      secure: this.configService.get<string>('SECURE'),
      user: this.configService.get<string>('USER'),
      pass: this.configService.get<string>('PASSWORD')
    }
  }

  // for testing use: Autogenerated email test accounts from Ethereal.email
  getTransporter() {
    return nodemailer.createTransport({
      host: this.mailConfig.host,
      port: this.mailConfig.port,
      secure: this.mailConfig.secure as boolean,
      auth: {
        user:  this.mailConfig.user,
        pass:  this.mailConfig.pass
      },
    });
  }

  getPasswordResetURL (token : string ) : string {
    return `${this.clientUrl}/reset-password/${token}`
  }

  getForgotPasswordTemplate( email : string, link: string, name: string ): IMailData {
    return {
      to: email,
      subject: 'Forgot Password',
      text: 'Forgot Password',
      html: `
            <h3>Hello ${name}!</h3>
            <p>Please use this <a href="${link}">${link}</a> to reset your password.</p>
        `,
    };
  }

  async sendEmail(mailOptions: IMailData): Promise<boolean> {
    const options = {
      from: `Blomstergard Robot <${this.configService.get<string>('AWS_EMAIL_FROM')}>`,
      ...mailOptions
    };

    try {
      const res = await this.awsMailService.send(options);
      console.log('Email sending result: ', res);
      return Promise.resolve(true);
    } catch (e) {
      this.logger.error('Mail sending error: ', e);
      return Promise.resolve(false);
    }
  }

}
